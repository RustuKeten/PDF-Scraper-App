// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for NextAuth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login (nullable for OAuth users)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // PDF Scraper specific fields
  credits       Int       @default(1000) // Starting credits
  planType      String    @default("FREE") // FREE, BASIC, PRO
  subscriptionId String?  // Stripe subscription ID

  // Relations
  accounts      Account[]
  sessions      Session[]
  files         File[]
  resumeData    ResumeData[]
  resumeHistory ResumeHistory[]

  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth Verification Token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// File metadata model
model File {
  id          String   @id @default(cuid())
  fileName    String
  fileSize    Int
  fileType    String   @default("application/pdf")
  uploadedAt  DateTime @default(now())
  userId      String
  storagePath String?  // Path in Supabase Storage
  status      String   @default("uploaded") // uploaded, processing, completed, failed

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeData   ResumeData?
  resumeHistory ResumeHistory[]

  @@map("files")
}

// Extracted resume data model
model ResumeData {
  id        String   @id @default(cuid())
  userId    String
  fileId    String   @unique
  data      Json     // Structured JSON data according to schema
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("resume_data")
}

// Complete upload history model (required by task)
model ResumeHistory {
  id        String   @id @default(cuid())
  userId    String
  fileId    String
  action    String   // upload, process, extract, delete
  status    String   // success, failed, pending
  message   String?  // Additional info or error message
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("resume_history")
}
